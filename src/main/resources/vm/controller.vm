package ${clazz.getControllerPackage()};

import ${clazz.getDomainPackage()}.${clazz.getClassName()}DO;
import ${clazz.getModelPackage()}.ApiResultModel;
import ${clazz.getModelPackage()}.${clazz.getClassName()}Model;
import ${clazz.getParamPackage()}.${clazz.getClassName()}Param;
import ${clazz.getServicePackage()}.I${clazz.getClassName()}Service;
import ${clazz.getModelPackage()}.PageModel;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

/**
 * Desc:
 * ------------------------------------
 * Author: ${clazz.archetypes.author}
 * Date: ${date}
 * Time: ${time}
 */
@Controller
public class ${clazz.getClassName()}Controller {

    private static final Logger log = LoggerFactory.getLogger(${clazz.getClassName()}Controller.class);

    @Autowired
    private I${clazz.getClassName()}Service ${table.javaTableName}Service;


    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ApiResultModel getById(@PathVariable int id) {

        ApiResultModel objectModel = new ApiResultModel();
        try {
            ${clazz.getClassName()}DO ${table.javaTableName}DO  = ${table.javaTableName}Service.getById(id);
            objectModel.setData(${table.javaTableName}DO);
        } catch (Exception e) {
            log.error(e.getMessage());
            objectModel.setStatus(-1);
            objectModel.setMessage(e.getMessage());
        }

        return objectModel;
    }


    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ApiResultModel add(@RequestBody ${clazz.getClassName()}Param param) {
        ApiResultModel objectModel = new ApiResultModel();
        try {
            ${clazz.getClassName()}DO ${table.javaTableName}DO = ${table.javaTableName}Service.add(param);
            ${clazz.getClassName()}Model ${table.javaTableName}Model = new ${clazz.getClassName()}Model(${table.javaTableName}DO);
            objectModel.setData(${table.javaTableName}Model);
        } catch (Exception e) {
            log.error(e.getMessage());
            objectModel.setStatus(-1);
            objectModel.setMessage(e.getMessage());
        }

        return objectModel;
    }

    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.PUT)
    public ApiResultModel update(@RequestBody ${clazz.getClassName()}Param param) {
        ApiResultModel objectModel = new ApiResultModel();
        try {
           ${clazz.getClassName()}DO ${table.javaTableName}DO = ${table.javaTableName}Service.update(param);
            objectModel.setData(${table.javaTableName}DO);
        } catch (Exception e) {
            log.error(e.getMessage());
            objectModel.setStatus(-1);
            objectModel.setMessage(e.getMessage());
        }

        return objectModel;
    }


    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ApiResultModel getPageList(@RequestParam(defaultValue = "0") int offset,
                                    @RequestParam(defaultValue = "10") int limit,
                                    ${clazz.getClassName()}Param param) {
        try {
            PageModel<${clazz.getClassName()}DO> pageModel = ${table.javaTableName}Service.getPageList(param, offset, limit);
            List<${clazz.getClassName()}Model> ${table.javaTableName}Models = new ArrayList<${clazz.getClassName()}Model>(CollectionUtils.size(pageModel.getData()));

            ${clazz.getClassName()}Model model = null;
            for (${clazz.getClassName()}DO ${table.javaTableName}DO : pageModel.getData()) {
                 model = new ${clazz.getClassName()}Model(${table.javaTableName}DO);
                 ${table.javaTableName}Models.add(model);
            }
            return new ApiResultModel(${table.javaTableName}Models, pageModel.getCount(), offset, limit);
        } catch (Exception e) {
            log.error(e.getMessage());
            return ApiResultModel.errorModel(e.getMessage());
        }
    }

    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.PUT)
    public ApiResultModel online(@PathVariable int id) {
        ApiResultModel objectModel = new ApiResultModel();
        try {
            ${table.javaTableName}Service.online(id);
        } catch (Exception e) {
            log.error(e.getMessage());
            objectModel.setStatus(-1);
            objectModel.setMessage(e.getMessage());
        }

        return objectModel;
    }

    @ResponseBody
    @RequestMapping(value = "", method = RequestMethod.PUT)
    public ApiResultModel offline(@PathVariable int id) {
        ApiResultModel objectModel = new ApiResultModel();
        try {
            ${table.javaTableName}Service.offline(id);
        } catch (Exception e) {
            log.error(e.getMessage());
            objectModel.setStatus(-1);
            objectModel.setMessage(e.getMessage());
        }

        return objectModel;
    }
}
